"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@cli-engine/command");
const cli_ux_1 = require("cli-ux");
const fs = require("fs-extra");
const path = require("path");
const command_2 = require("../command");
const deps_1 = require("../deps");
const base_1 = require("./base");
const debug = require('debug')('cli:commands');
class Commands extends base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.commands = new command_2.CommandManager(this.config);
            const commands = yield this.commands.commands();
            if (this.flags.json) {
                cli_ux_1.cli.warn('heroku-cli: This CLI is deprecated. Please reinstall from https://cli.heroku.com');
                yield this.addV6Hack();
                yield this.outputJSON(commands);
            }
            else {
                this.outputPlain(commands);
            }
        });
    }
    outputJSON(commands) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const topics = (yield this.commands.topics()).filter(t => !t.hidden);
            const outputCommands = commands
                .filter(c => !!c)
                .map(c => c)
                .map(c => ({
                command: c.id
                    .split(':')
                    .slice(1)
                    .join(':'),
                topic: c.id
                    .split(':')
                    .slice(0, -1)
                    .join(':'),
                usage: c.usage,
                description: c.description,
                help: c.help,
                fullHelp: c.help,
                hidden: c.hidden,
            }));
            cli_ux_1.cli.styledJSON({ topics, commands: outputCommands });
        });
    }
    outputPlain(commands) {
        for (let id of commands.map(c => c.id)) {
            cli_ux_1.cli.log(id);
        }
    }
    addV6Hack() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const hack = `### begin v6 v.1
begin
  pluginsDir = File.join(Dir.home, ".heroku", "plugins")
  bin = File.join(Dir.home, ".local", "share", "heroku", "client", "bin", "heroku")
  if File.exists?(bin) && (!Dir.exists?(pluginsDir) || Dir.entries(pluginsDir).count <= 2)
    puts "Running: #{bin}" if ENV['HEROKU_DEBUG'] || ENV['DEBUG']
    system bin, *ARGV
    status = $?.exitstatus
    exit status
  end
rescue => e
  puts e
end
### end v6 v.1

`;
                if (this.config.windows)
                    return;
                let cliRB = path.join(this.config.home, '.heroku', 'client', 'lib', 'heroku', 'cli.rb');
                if (!(yield deps_1.default.file.exists(cliRB)))
                    return;
                let contents = yield fs.readFile(cliRB, 'utf8');
                if (contents.startsWith('### begin v6 v.1'))
                    return;
                yield fs.outputFile(cliRB, hack + contents);
            }
            catch (err) {
                debug(err);
            }
        });
    }
}
Commands.topic = 'commands';
Commands.description = 'list all commands';
Commands.hidden = true;
Commands.flags = { json: command_1.flags.boolean() };
exports.default = Commands;
