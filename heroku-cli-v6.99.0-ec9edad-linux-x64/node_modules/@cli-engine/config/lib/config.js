"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os = require("os");
const path = require("path");
const util_1 = require("util");
class Config {
    constructor(opts = {}) {
        this.opts = opts;
        this._version = require('../package.json').version;
        this.opts = opts;
    }
    // exec info
    get argv() { return this.opts.argv || process.argv; }
    get bin() { return this.cliPjson.bin || this.pjson.name; }
    get channel() { return this.opts.channel || 'stable'; }
    get name() { return this.pjson.name; }
    get reexecBin() { return this.opts.reexecBin || this.scopedEnvVar('CLI_BINPATH'); }
    get root() { return this.opts.root; }
    get version() { return this.opts.version || this.pjson.version; }
    // system
    get arch() { return this.opts.arch || this.scopedEnvVar('ARCH_OVERRIDE') || (os.arch() === 'ia32' ? 'x86' : os.arch()); }
    get platform() { return this.opts.platform || this.scopedEnvVar('PLATFORM_OVERRIDE') || os.platform(); }
    get windows() { return this.platform === 'win32'; }
    // plugin info
    get corePlugins() { return this.cliPjson.corePlugins || this.cliPjson.plugins || []; }
    get defaultCommand() { return this.cliPjson.defaultCommand; }
    get hooks() { return objValsToArrays(this.cliPjson.hooks); }
    get npmRegistry() { return this.scopedEnvVar('NPM_REGISTRY') || this.cliPjson.npmRegistry || 'https://registry.yarnpkg.com'; }
    get topics() { return this.cliPjson.topics || {}; }
    get userPluginsEnabled() { return !!this.cliPjson.userPluginsEnabled; }
    get s3() { return { host: this.scopedEnvVar('S3_HOST') || this.cliPjson.s3 && this.cliPjson.s3.host }; }
    // paths
    get dirname() { return this.cliPjson.dirname || this.bin; }
    get home() { return process.env.HOME || (this.windows && this.windowsHome) || os.homedir() || os.tmpdir(); }
    get cacheDir() { return this.opts.cacheDir || this.scopedEnvVar('CACHE_DIR') || this.macosCacheDir || this.dir('cache'); }
    get configDir() { return this.opts.configDir || this.scopedEnvVar('CONFIG_DIR') || this.dir('config'); }
    get dataDir() { return this.opts.dataDir || this.scopedEnvVar('DATA_DIR') || this.dir('data'); }
    get errlog() { return path.join(this.cacheDir, 'error.log'); }
    get pjson() {
        if (!this.opts.pjson && this.root) {
            this.opts.pjson = require(path.join(this.root, 'package.json'));
        }
        return Object.assign({ 'cli-engine': Object.assign({}, this.opts.pjson && this.opts.pjson['cli-engine'] || {}, { type: 'cli' }), dependencies: {}, name: 'cli-engine', version: '0.0.0' }, (this.opts.pjson || {}));
    }
    get userAgent() {
        const channel = this.channel === 'stable' ? '' : ` ${this.channel}`;
        return `${this.name}/${this.version}${channel} (${this.platform}-${this.arch}) node-${process.version}`;
    }
    get commandsDir() {
        if (!this.root)
            return;
        let commandsDir = this.pjson['cli-engine'].commands;
        if (!commandsDir)
            return;
        return path.join(this.root, commandsDir);
    }
    get updateDisabled() {
        if (this.opts.updateDisabled)
            return this.opts.updateDisabled;
        const k = this.scopedEnvVarKey('SKIP_CORE_UPDATES');
        if (process.env[k])
            return `${k} is set to ${process.env[k]}`;
    }
    get shell() {
        let shellPath;
        const { SHELL, COMSPEC } = process.env;
        if (SHELL) {
            shellPath = SHELL.split(`/`);
        }
        else if (this.windows && COMSPEC) {
            shellPath = COMSPEC.split(/\\|\//);
        }
        else {
            shellPath = ['unknown'];
        }
        return shellPath[shellPath.length - 1];
    }
    get debug() {
        try {
            let debug = require('debug')(this.bin).enabled || this.scopedEnvVarTrue('DEBUG');
            return debug ? 1 : 0;
        }
        catch (err) {
            return 0;
        }
    }
    [util_1.inspect.custom](depth, options) {
        if (depth < 0)
            return options.stylize(`[Config ${this.userAgent}]`, 'special');
        let props = {
            userAgent: this.userAgent,
        };
        if (this.root)
            props.root = this.root;
        if (this.reexecBin)
            props.reexecBin = this.reexecBin;
        if (depth > 1)
            props = Object.assign({}, props, { home: this.home, shell: this.shell, dataDir: this.dataDir, cacheDir: this.cacheDir });
        const newOptions = Object.assign({}, options, { depth: (options.depth === null) ? null : (options.depth || 0 - 1) });
        const padding = ' '.repeat(7);
        const inner = util_1.inspect(props, newOptions).replace(/\n/g, `\n${padding}`);
        return `${options.stylize('Config', 'special')} ${inner}`;
    }
    get windowsHome() { return this.windowsHomedriveHome || this.windowsUserprofileHome; }
    get windowsHomedriveHome() { return (process.env.HOMEDRIVE && process.env.HOMEPATH && path.join(process.env.HOMEDRIVE, process.env.HOMEPATH)); }
    get windowsUserprofileHome() { return process.env.USERPROFILE; }
    get macosCacheDir() { return this.platform === 'darwin' && path.join(this.home, 'Library', 'Caches', this.dirname) || undefined; }
    get cliPjson() { return this.pjson['cli-engine']; }
    scopedEnvVar(k) {
        return process.env[this.scopedEnvVarKey(k)];
    }
    scopedEnvVarTrue(k) {
        let v = process.env[this.scopedEnvVarKey(k)];
        return v === '1' || v === 'true';
    }
    scopedEnvVarKey(k) {
        return [this.bin, k]
            .map(p => p.replace(/-/g, '_'))
            .join('_')
            .toUpperCase();
    }
    dir(category) {
        const base = process.env[`XDG_${category.toUpperCase()}_HOME`]
            || (this.windows && process.env.LOCALAPPDATA)
            || path.join(this.home, category === 'data' ? '.local/share' : '.' + category);
        return path.join(base, this.dirname);
    }
}
tslib_1.__decorate([
    memoize()
], Config.prototype, "bin", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "channel", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "name", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "reexecBin", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "root", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "version", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "arch", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "platform", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "windows", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "corePlugins", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "defaultCommand", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "hooks", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "npmRegistry", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "topics", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "userPluginsEnabled", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "s3", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "dirname", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "home", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "cacheDir", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "configDir", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "dataDir", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "errlog", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "pjson", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "userAgent", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "commandsDir", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "updateDisabled", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "shell", null);
tslib_1.__decorate([
    memoize()
], Config.prototype, "debug", null);
exports.Config = Config;
exports.default = Config;
exports.buildConfig = util_1.deprecate((opts) => new Config(opts), '`buildConfig()` is deprecated. Use `new Config()` instead.');
function toArray(o) {
    return Array.isArray(o) ? o : [o];
}
function objValsToArrays(input) {
    input = input || {};
    return Object.keys(input).reduce((output, k) => {
        output[k] = toArray(input[k]);
        return output;
    }, {});
}
const MEMOIZED_CONSTANT = Symbol('memoized');
function memoize() {
    return (_, __, descriptor) => {
        if (!descriptor.value && !descriptor.get)
            throw new Error('Only put the @memoize decorator on a method or getter.');
        const originalMethod = descriptor.value || descriptor.get;
        let fn = function (...args) {
            const i = this[MEMOIZED_CONSTANT] || (this[MEMOIZED_CONSTANT] = Symbol('memoized'));
            if (!fn[i]) {
                fn[i] = originalMethod.apply(this, args);
            }
            return fn[i];
        };
        if (descriptor.value)
            descriptor.value = fn;
        else
            descriptor.get = fn;
        return descriptor;
    };
}
