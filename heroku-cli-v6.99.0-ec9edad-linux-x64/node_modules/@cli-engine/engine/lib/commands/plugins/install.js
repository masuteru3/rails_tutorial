"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@cli-engine/command");
const cli_ux_1 = require("cli-ux");
const hooks_1 = require("../../hooks");
const base_1 = require("../base");
let examplePlugin = 'heroku-production-status';
let bin = 'heroku';
const g = global;
if (g.config) {
    bin = g.config.bin;
    let pjson = g.config.pjson['cli-engine'];
    if (pjson.help && pjson.help.plugins) {
        examplePlugin = Object.keys(pjson.help.plugins)[0];
    }
}
class PluginsInstall extends base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const plugins = this.config.plugins;
            for (let plugin of this.argv) {
                let scoped = plugin[0] === '@';
                if (scoped)
                    plugin = plugin.slice(1);
                let [name, tag = 'latest'] = plugin.split('@');
                if (scoped)
                    name = `@${name}`;
                cli_ux_1.cli.action.start(`Installing plugin ${name}${tag === 'latest' ? '' : '@' + tag}`);
                yield plugins.install({ type: 'user', name, tag, force: this.flags.force });
                cli_ux_1.cli.action.stop();
            }
            const hooks = new hooks_1.Hooks(this.config);
            yield hooks.run('update');
        });
    }
}
PluginsInstall.topic = 'plugins';
PluginsInstall.command = 'install';
PluginsInstall.description = 'installs a plugin into the CLI';
PluginsInstall.usage = 'plugins:install PLUGIN...';
PluginsInstall.help = `
  Example:
    $ ${bin} plugins:install ${examplePlugin}
  `;
PluginsInstall.variableArgs = true;
PluginsInstall.args = [{ name: 'plugin', description: 'plugin to install', required: true }];
PluginsInstall.flags = {
    force: command_1.flags.boolean({ char: 'f' }),
};
exports.default = PluginsInstall;
