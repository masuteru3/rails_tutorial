"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    // remote
    get HTTP() { return fetch('http-call').HTTP; },
    get moment() { return fetch('moment'); },
    get klaw() { return fetch('klaw'); },
    get Heroku() { return fetch('@heroku-cli/command'); },
    get semver() { return fetch('semver'); },
    get assync() { return fetch('assync').default; },
    get filesize() { return fetch('filesize'); },
    get globby() { return fetch('globby'); },
    // local
    get Help() { return fetch('./commands/help').default; },
    get Hooks() { return fetch('./hooks').Hooks; },
    get NotFound() { return fetch('./not_found').default; },
    get Updater() { return fetch('./updater').Updater; },
    get util() { return fetch('./util'); },
    get file() { return fetch('./file'); },
    get fs() { return fetch('fs-extra'); },
    get validate() { return fetch('./validate'); },
    // plugins
    get Plugins() { return fetch('./plugins').Plugins; },
    get Yarn() { return fetch('./plugins/yarn').default; },
    get PluginManifest() { return fetch('./plugins/manifest').PluginManifest; },
    get PluginLegacy() { return fetch('./plugins/legacy').PluginLegacy; },
    get CommandManager() { return fetch('./command').CommandManager; },
};
const cache = {};
function fetch(s) {
    if (s in cache)
        return cache[s];
    try {
        return cache[s] = require(s);
    }
    catch (err) {
        if (err.code !== 'ENOENT')
            throw err;
        cache[s] = undefined;
    }
}
