import * as Types from './types';
export * from './types';
export declare class Config {
    protected opts: Types.ConfigOptions;
    _version: any;
    constructor(opts?: Types.ConfigOptions);
    readonly argv: string[];
    readonly bin: string;
    readonly channel: string;
    readonly name: string;
    readonly reexecBin: string | undefined;
    readonly root: string | undefined;
    readonly version: string;
    readonly arch: Types.ArchTypes;
    readonly platform: Types.PlatformTypes;
    readonly windows: boolean;
    readonly corePlugins: string[];
    readonly defaultCommand: string | undefined;
    readonly hooks: {
        [name: string]: string[];
    };
    readonly npmRegistry: string;
    readonly topics: Types.ITopics;
    readonly userPluginsEnabled: boolean;
    readonly s3: {
        host: string | undefined;
    };
    readonly dirname: string;
    readonly home: string;
    readonly cacheDir: string;
    readonly configDir: string;
    readonly dataDir: string;
    readonly errlog: string;
    readonly pjson: Types.ICLIPJSON;
    readonly userAgent: string;
    readonly commandsDir: string | undefined;
    readonly updateDisabled: string | undefined;
    readonly shell: string;
    readonly debug: number;
    protected readonly windowsHome: string | undefined;
    protected readonly windowsHomedriveHome: string | undefined;
    protected readonly windowsUserprofileHome: string | undefined;
    protected readonly macosCacheDir: string | undefined;
    protected readonly cliPjson: Types.ICLIPJSON['cli-engine'];
    protected scopedEnvVar(k: string): string | undefined;
    protected scopedEnvVarTrue(k: string): boolean;
    protected scopedEnvVarKey(k: string): string;
    protected dir(category: 'cache' | 'data' | 'config'): string;
}
export default Config;
export declare const buildConfig: (opts?: Types.ConfigOptions | undefined) => Config;
