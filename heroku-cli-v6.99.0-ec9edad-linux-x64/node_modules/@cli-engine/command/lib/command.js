"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const pjson = require('../package.json');
const util_1 = require("util");
const deps_1 = require("./deps");
class Command {
    constructor(config) {
        this.config = config;
        this.flags = {};
        this.args = {};
        this.debug = fetchDebug(this.ctor.id);
        if (deps_1.default.HTTP) {
            this.http = deps_1.default.HTTP.defaults({
                headers: {
                    'user-agent': `${this.config.name}/${this.config.version} (${this.config.platform}-${this.config.arch}) node-${process.version}`,
                },
            });
        }
    }
    static buildHelp(config) {
        let help = new deps_1.default.Help(config);
        return help.command(this);
    }
    static buildHelpLine(config) {
        let help = new deps_1.default.Help(config);
        return help.commandLine(this);
    }
    get ctor() {
        return this.constructor;
    }
    init(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.debug('init version: %s argv: %o', this.ctor._version, argv);
            try {
                const parse = yield deps_1.default.CLIFlags.parse({
                    argv,
                    args: this.ctor.args || [],
                    flags: this.ctor.flags || {},
                    strict: !this.ctor.variableArgs,
                });
                this.flags = parse.flags;
                this.argv = parse.argv;
                this.args = parse.args;
            }
            catch (err) {
                if (err.message.match(/^Unexpected argument: (-h|help)/)) {
                    throw new deps_1.default.HelpErr(err.message);
                }
                throw err;
            }
        });
    }
    done() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (deps_1.default.cli)
                    yield deps_1.default.cli.done();
            }
            catch (err) {
                if (deps_1.default.cli)
                    deps_1.default.cli.warn(err);
                else
                    // tslint:disable-next-line
                    console.error(err);
            }
        });
    }
}
Command.aliases = [];
Command.variableArgs = false;
Command.args = [];
// tslint:disable-next-line
Command._version = pjson.version;
Command.base = `${pjson.name}@${pjson.version}`;
/**
 * instantiate and run the command setting {mock: true} in the config (shorthand method)
 */
Command.mock = function (argv = [], config = {}) {
    return tslib_1.__awaiter(this, arguments, void 0, function* () {
        if (typeof argv === 'string') {
            argv = Array.from(arguments);
            // old-style call
            util_1.deprecate(() => {
                config = {};
            }, "`Command.mock('--foo', 'bar')` is deprecated. Please use `Command.mock(['--foo', 'bar'])` instead.")();
        }
        if (deps_1.default.cli)
            deps_1.default.cli.config.mock = true;
        const cmd = yield this.run(argv, new deps_1.default.Config(config));
        return {
            cmd,
            stderr: deps_1.default.cli ? deps_1.default.cli.stderr.output : 'cli-ux not found',
            stdout: deps_1.default.cli ? deps_1.default.cli.stdout.output : 'cli-ux not found',
        };
    });
};
/**
 * instantiate and run the command
 */
Command.run = function (argv = [], config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const cmd = new this(config);
        try {
            yield cmd.init(argv);
            yield cmd.run();
            yield cmd.done();
        }
        catch (err) {
            // throw HelpErr to allow the CLI to do something with it
            if (err instanceof deps_1.default.HelpErr)
                throw err;
            if (!deps_1.default.cli)
                throw err;
            deps_1.default.cli.error(err);
        }
        return cmd;
    });
};
exports.Command = Command;
function fetchDebug(id) {
    try {
        return require('debug')(`cli:command:${id}`);
    }
    catch (err) {
        return () => { };
    }
}
