/// <reference types="node" />
import CLI = require('cli-ux');
import HTTP = require('http-call');
import netrc = require('netrc-parser');
import apiClient = require('./api_client');
import file = require('./file');
import git = require('./git');
import mutex = require('./mutex');
import flags = require('./flags');
export declare const deps: {
    readonly cli: {
        config: CLI.Config;
        trace: (...data: any[]) => void;
        debug: (...data: any[]) => void;
        info: (...data: any[]) => void;
        log: (...data: any[]) => void;
        warn: (input: string | Error, opts?: CLI.ErrorOptions | undefined) => void;
        error: (input: string | Error, opts?: CLI.ErrorOptions | undefined) => void;
        fatal: (input: string | Error, opts?: CLI.ErrorOptions | undefined) => void;
        exit(code?: number | undefined, error?: Error | undefined): never;
        readonly prompt: (name: string, options?: CLI.IPromptOptions | undefined) => Promise<any>;
        readonly confirm: (message: string) => Promise<boolean>;
        readonly action: CLI.ActionBase;
        styledObject(obj: any, keys?: string[] | undefined): void;
        readonly styledHeader: (header: string) => void;
        readonly styledJSON: (obj: any) => void;
        readonly table: typeof CLI.Table.default;
        done(): Promise<void>;
    };
    readonly HTTP: typeof HTTP;
    readonly netrc: netrc.Netrc;
    readonly Mutex: typeof mutex.Mutex;
    readonly yubikey: {
        disable: () => void;
        enable: () => void;
        platform: NodeJS.Platform;
    };
    readonly APIClient: typeof apiClient.APIClient;
    readonly file: typeof file;
    readonly flags: typeof flags;
    readonly Git: typeof git.Git;
};
export default deps;
