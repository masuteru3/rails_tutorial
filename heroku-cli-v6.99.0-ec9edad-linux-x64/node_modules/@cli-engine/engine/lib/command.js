"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assync_1 = require("assync");
const cli_ux_1 = require("cli-ux");
const ts_lodash_1 = require("ts-lodash");
const deps_1 = require("./deps");
const topic_1 = require("./topic");
class CommandManager {
    constructor(config) {
        this.config = config;
        this.managers = [this.config.plugins];
        this.debug = require('debug')('cli:command');
        this.hooks = new deps_1.default.Hooks(this.config);
    }
    run(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.hooks.run('init');
            const id = argv[2] || 'help';
            yield this.load();
            if (this.cmdAskingForHelp(argv)) {
                this.debug('cmdAskingForHelp');
                return this.help(argv.slice(2));
            }
            let cmd = yield this.findCommand(id);
            if (!cmd) {
                let topic = yield this.findTopic(id);
                if (topic)
                    return this.help([id]);
                else
                    return this.notFound(id);
            }
            yield this.hooks.run('prerun', { argv, Command: cmd });
            this.debug('running %s', cmd.id);
            let result;
            try {
                result = yield cmd.run(argv);
            }
            catch (err) {
                if (err.showHelp)
                    return this.help(argv.slice(2));
                throw err;
            }
            this.debug('exited normally');
            return result;
        });
    }
    help(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield deps_1.default.Help.run(argv, this.config);
        });
    }
    notFound(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield deps_1.default.NotFound.run([id], this.config);
        });
    }
    commands() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return ts_lodash_1.default.sortBy(this.result.allCommands, 'id');
        });
    }
    rootCommands() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            let commands = Object.keys(this.result.commands).map(k => this.result.commands[k]);
            return ts_lodash_1.default.sortBy(commands, 'id');
        });
    }
    findTopic(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return this.result.findTopic(id);
        });
    }
    findCommand(id, must) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            let cmd = this.result.findCommand(id);
            if (!cmd && must)
                throw new Error(`${id} not found`);
            return cmd;
        });
    }
    topics() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return this.result.allTopics;
        });
    }
    rootTopics() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.load();
            return this.result.subtopics;
        });
    }
    load() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.result)
                return;
            this.debug('load');
            this.result = new topic_1.RootTopic();
            yield this.hooks.run('init');
            let managers = yield this.submanagers();
            let loads = managers.filter(m => m.load).map(m => m.load().catch(err => {
                if (err.code === 'ENOCOMMANDS')
                    this.debug(err);
                else
                    cli_ux_1.default.warn(err);
            }));
            for (let r of loads) {
                let result = yield r;
                if (result)
                    this.addResult(result);
            }
            cli_ux_1.default.action.stop();
        });
    }
    submanagers() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this._submanagers)
                return this._submanagers;
            const fetch = (managers) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const submanagers = yield assync_1.default(managers)
                    .filter(m => !!m.submanagers)
                    .map(m => Promise.resolve(m.submanagers()).then(fetch))
                    .flatMap()
                    .catch(err => {
                    cli_ux_1.default.warn(err);
                    return [];
                });
                return [...(managers || []), ...(submanagers || [])];
            });
            this._submanagers = yield fetch(this.managers);
            return this._submanagers;
        });
    }
    addResult(result) {
        if (!result)
            return;
        this.result.addTopics(result.topics);
        this.result.addCommands(result.commands);
    }
    cmdAskingForHelp(argv) {
        for (let arg of argv) {
            if (arg === '--help')
                return true;
            if (arg === '--')
                return false;
        }
        return false;
    }
}
exports.CommandManager = CommandManager;
