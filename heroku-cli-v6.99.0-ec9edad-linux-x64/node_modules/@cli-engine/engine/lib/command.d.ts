import { ICommand } from '@cli-engine/config';
import Config from './config';
import { ITopic, Topic } from './topic';
export declare type RunFn = (argv: string[]) => Promise<void>;
export declare type GetCommandFn = () => Promise<ICommand>;
export interface ICommandInfo {
    _version?: string;
    id: string;
    hidden: boolean;
    help: string;
    helpLine: [string, string | undefined];
    aliases: string[];
    description: string | undefined;
    usage: string | undefined;
    plugin: {
        name: string;
        version: string;
    };
    fetchCommand: GetCommandFn;
    run: RunFn;
}
export interface ILoadResult {
    topics?: ITopic[];
    commands?: ICommandInfo[];
}
export interface ICommandManager {
    submanagers?(): Promise<ICommandManager[]>;
    load?(): Promise<ILoadResult>;
}
export declare class CommandManager {
    protected config: Config;
    private managers;
    private hooks;
    private debug;
    private result;
    private _submanagers;
    constructor(config: Config);
    run(argv: string[]): Promise<any>;
    help(argv: string[]): Promise<void>;
    notFound(id: string): Promise<void>;
    commands(): Promise<ICommandInfo[]>;
    rootCommands(): Promise<ICommandInfo[]>;
    findTopic(id: string): Promise<Topic | undefined>;
    findCommand(id: string, must: true): Promise<ICommandInfo>;
    findCommand(id: string, must?: boolean): Promise<ICommandInfo | undefined>;
    topics(): Promise<Topic[]>;
    rootTopics(): Promise<{
        [k: string]: Topic;
    }>;
    private load();
    private submanagers();
    private addResult(result?);
    private cmdAskingForHelp(argv);
}
