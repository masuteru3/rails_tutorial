"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@cli-engine/command");
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const util_1 = require("../../util");
const base_1 = require("../base");
let examplePlugins = {
    'heroku-ci': { version: '1.8.0' },
    'heroku-cli-status': { version: '3.0.10', type: 'link' },
    'heroku-fork': { version: '4.1.22' },
};
let bin = 'heroku';
const g = global;
if (g.config) {
    bin = g.config.bin;
    let pjson = g.config.pjson['cli-engine'];
    if (pjson.help && pjson.help.plugins) {
        examplePlugins = pjson.help.plugins;
    }
}
const examplePluginsHelp = util_1.objEntries(examplePlugins).map(([name, p]) => `    ${name} ${p.version}`);
class default_1 extends base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let plugins = yield this.config.plugins.list();
            plugins = plugins.filter(p => p.type !== 'builtin' && p.type !== 'main');
            plugins.sort(util_1.compare('name'));
            if (!this.flags.core)
                plugins = plugins.filter(p => p.type !== 'core');
            if (!plugins.length)
                cli_ux_1.cli.warn('no plugins installed');
            for (let plugin of plugins) {
                let output = `${plugin.name} ${color_1.color.dim(plugin.version)}`;
                if (plugin.type !== 'user')
                    output += color_1.color.dim(` (${plugin.type})`);
                if (plugin.type === 'link')
                    output += ` ${plugin.root}`;
                else if (plugin.tag !== 'latest')
                    output += color_1.color.dim(` (${String(plugin.tag)})`);
                cli_ux_1.cli.log(output);
            }
        });
    }
}
default_1.topic = 'plugins';
default_1.flags = { core: command_1.flags.boolean({ description: 'show core plugins' }) };
default_1.description = 'list installed plugins';
default_1.help = `Example:
    $ ${bin} plugins
${examplePluginsHelp.join('\n')}
`;
exports.default = default_1;
