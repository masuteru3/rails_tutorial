import { AlphabetLowercase, AlphabetUppercase } from './alphabet';
export declare type DefaultContext<T> = {
    options: IOptionFlag<T>;
    flags: {
        [k: string]: string;
    };
};
export interface IFlagBase {
    name: string;
    char?: AlphabetLowercase | AlphabetUppercase;
    description?: string;
    hidden?: boolean;
    required?: boolean;
}
export interface IBooleanFlag extends IFlagBase {
    type: 'boolean';
    allowNo: boolean;
}
export interface IOptionFlag<T = string> extends IFlagBase {
    type: 'option';
    default?: T | ((context: DefaultContext<T>) => T | undefined);
    parse: (input: string) => T;
    multiple: boolean;
}
export declare type Definition<T> = (options?: Partial<IOptionFlag<T>>) => IOptionFlag<T>;
export declare function option<T = string>(defaults?: Partial<IOptionFlag<T>>): Definition<T>;
export declare type IFlag<T> = IBooleanFlag | IOptionFlag<T>;
export declare function boolean(options?: Partial<IBooleanFlag>): IBooleanFlag;
export declare const integer: Definition<number>;
declare const stringFlag: Definition<string>;
export { stringFlag as string };
export declare const defaultFlags: {
    color: IBooleanFlag;
};
export declare type Input = {
    [name: string]: IFlag<any>;
};
