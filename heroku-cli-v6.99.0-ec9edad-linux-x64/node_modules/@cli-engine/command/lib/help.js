"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deps_1 = require("./deps");
function buildUsage(command) {
    if (command.usage)
        return command.usage.trim();
    let cmd = command.id;
    if (!command.args)
        return (cmd || '').trim();
    let args = command.args.map(renderArg);
    return `${cmd} ${args.join(' ')}`.trim();
}
function renderArg(arg) {
    let name = arg.name.toUpperCase();
    if (arg.required)
        return `${name}`;
    else
        return `[${name}]`;
}
class Help {
    constructor(config) {
        this.config = config;
    }
    command(cmd) {
        let flagDefs = cmd.flags || {};
        let flags = Object.keys(flagDefs)
            .filter(k => !flagDefs[k].hidden)
            .map(k => {
            flagDefs[k].name = k;
            return flagDefs[k];
        });
        let args = (cmd.args || []).filter(a => !a.hidden);
        let hasFlags = flags.length ? ` ${deps_1.default.chalk.blue('[flags]')}` : '';
        let usage = `${deps_1.default.chalk.bold('Usage:')} ${this.config.bin} ${buildUsage(cmd)}${hasFlags}\n`;
        return [
            usage,
            cmd.description ? `\n${deps_1.default.chalk.bold(cmd.description.trim())}\n` : '',
            this.renderAliases(cmd.aliases),
            this.renderArgs(args),
            this.renderFlags(flags),
            cmd.help ? `\n${cmd.help.trim()}\n` : '',
        ].join('');
    }
    commandLine(cmd) {
        return [buildUsage(cmd), cmd.description ? deps_1.default.chalk.dim(cmd.description) : undefined];
    }
    renderAliases(aliases) {
        if (!aliases || !aliases.length)
            return '';
        let a = aliases.map(a => `  $ ${this.config.bin} ${a}`).join('\n');
        return `\n${deps_1.default.chalk.blue('Aliases:')}\n${a}\n`;
    }
    renderArgs(args) {
        if (!deps_1.default.renderList)
            return `CLI-UX NOT FOUND in ${__filename}`;
        if (!args.find(f => !!f.description))
            return '';
        return ('\n' +
            deps_1.default.renderList(args.map(a => {
                return [a.name.toUpperCase(), a.description ? deps_1.default.chalk.dim(a.description) : undefined];
            })) +
            '\n');
    }
    renderFlags(flags) {
        if (!deps_1.default.renderList)
            return `CLI-UX NOT FOUND in ${__filename}`;
        if (!flags.length)
            return '';
        return `\n${deps_1.default.chalk.blue('Flags:')}\n` + deps_1.default.renderList(deps_1.default.CLIFlags.flagUsages(flags)) + '\n';
    }
}
exports.Help = Help;
