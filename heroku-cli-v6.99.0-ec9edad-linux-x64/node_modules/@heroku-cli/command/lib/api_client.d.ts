import * as Config from '@oclif/config';
import { CLIError } from '@oclif/errors';
import { HTTP, HTTPError, HTTPRequestOptions } from 'http-call';
import { Mutex } from './mutex';
export interface IOptions {
    required?: boolean;
    preauth?: boolean;
}
export interface IHerokuAPIErrorOptions {
    resource?: string;
    app?: {
        id: string;
        name: string;
    };
    id?: string;
    message?: string;
    url?: string;
}
export declare class HerokuAPIError extends CLIError {
    http: HTTPError;
    body: IHerokuAPIErrorOptions;
    constructor(httpError: HTTPError);
}
export declare class APIClient {
    protected config: Config.IConfig;
    options: IOptions;
    preauthPromises: {
        [k: string]: Promise<HTTP>;
    };
    http: typeof HTTP;
    private _twoFactorMutex;
    private _auth?;
    constructor(config: Config.IConfig, options?: IOptions);
    readonly twoFactorMutex: Mutex<string>;
    readonly auth: string | undefined;
    twoFactorPrompt(): Promise<string>;
    preauth(app: string, factor: string): Promise<HTTP>;
    get(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    post(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    put(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    patch(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    delete(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    stream(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    request(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    readonly defaults: typeof HTTP.defaults;
}
