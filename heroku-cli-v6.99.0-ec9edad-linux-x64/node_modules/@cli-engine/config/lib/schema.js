'use strict';
var validate = (function() {
  var pattern0 = new RegExp('cli');
  var pattern1 = new RegExp('plugin');
  var refVal = [];
  var refVal1 = (function() {
    var pattern0 = new RegExp('cli');
    var pattern1 = new RegExp('plugin');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        var data1 = data['cli-engine'];
        if (data1 === undefined) {
          valid1 = true;
        } else {
          var errs_1 = errors;
          if ((data1 && typeof data1 === "object" && !Array.isArray(data1))) {
            var errs__1 = errors;
            var valid2 = true;
            for (var key1 in data1) {
              var isAdditional1 = !(false || validate.schema.properties['cli-engine'].properties[key1]);
              if (isAdditional1) {
                valid2 = false;
                validate.errors = [{
                  keyword: 'additionalProperties',
                  dataPath: (dataPath || '') + '[\'cli-engine\']',
                  schemaPath: '#/properties/cli-engine/additionalProperties',
                  params: {
                    additionalProperty: '' + key1 + ''
                  },
                  message: 'should NOT have additional properties'
                }];
                return false;
                break;
              }
            }
            if (valid2) {
              var data2 = data1.type;
              if (data2 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data2 === "string") {
                  if (!pattern0.test(data2)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '[\'cli-engine\'].type',
                      schemaPath: '#/properties/cli-engine/properties/type/pattern',
                      params: {
                        pattern: 'cli'
                      },
                      message: 'should match pattern "cli"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '[\'cli-engine\'].type',
                    schemaPath: '#/properties/cli-engine/properties/type/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data1.bin === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data1.bin !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '[\'cli-engine\'].bin',
                      schemaPath: '#/properties/cli-engine/properties/bin/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data1.commands === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1.commands !== "string") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '[\'cli-engine\'].commands',
                        schemaPath: '#/properties/cli-engine/properties/commands/type',
                        params: {
                          type: 'string'
                        },
                        message: 'should be string'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data1.defaultCommand === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (typeof data1.defaultCommand !== "string") {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: (dataPath || '') + '[\'cli-engine\'].defaultCommand',
                          schemaPath: '#/properties/cli-engine/properties/defaultCommand/type',
                          params: {
                            type: 'string'
                          },
                          message: 'should be string'
                        }];
                        return false;
                      }
                      var valid2 = errors === errs_2;
                    }
                    if (valid2) {
                      if (data1.dirname === undefined) {
                        valid2 = true;
                      } else {
                        var errs_2 = errors;
                        if (typeof data1.dirname !== "string") {
                          validate.errors = [{
                            keyword: 'type',
                            dataPath: (dataPath || '') + '[\'cli-engine\'].dirname',
                            schemaPath: '#/properties/cli-engine/properties/dirname/type',
                            params: {
                              type: 'string'
                            },
                            message: 'should be string'
                          }];
                          return false;
                        }
                        var valid2 = errors === errs_2;
                      }
                      if (valid2) {
                        if (data1.npmRegistry === undefined) {
                          valid2 = true;
                        } else {
                          var errs_2 = errors;
                          if (typeof data1.npmRegistry !== "string") {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: (dataPath || '') + '[\'cli-engine\'].npmRegistry',
                              schemaPath: '#/properties/cli-engine/properties/npmRegistry/type',
                              params: {
                                type: 'string'
                              },
                              message: 'should be string'
                            }];
                            return false;
                          }
                          var valid2 = errors === errs_2;
                        }
                        if (valid2) {
                          if (data1.userPluginsEnabled === undefined) {
                            valid2 = true;
                          } else {
                            var errs_2 = errors;
                            if (typeof data1.userPluginsEnabled !== "boolean") {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: (dataPath || '') + '[\'cli-engine\'].userPluginsEnabled',
                                schemaPath: '#/properties/cli-engine/properties/userPluginsEnabled/type',
                                params: {
                                  type: 'boolean'
                                },
                                message: 'should be boolean'
                              }];
                              return false;
                            }
                            var valid2 = errors === errs_2;
                          }
                          if (valid2) {
                            var data2 = data1.corePlugins;
                            if (data2 === undefined) {
                              valid2 = true;
                            } else {
                              var errs_2 = errors;
                              if (Array.isArray(data2)) {
                                var errs__2 = errors;
                                var valid2;
                                for (var i2 = 0; i2 < data2.length; i2++) {
                                  var errs_3 = errors;
                                  if (typeof data2[i2] !== "string") {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '[\'cli-engine\'].corePlugins[' + i2 + ']',
                                      schemaPath: '#/properties/cli-engine/properties/corePlugins/items/type',
                                      params: {
                                        type: 'string'
                                      },
                                      message: 'should be string'
                                    }];
                                    return false;
                                  }
                                  var valid3 = errors === errs_3;
                                  if (!valid3) break;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: (dataPath || '') + '[\'cli-engine\'].corePlugins',
                                  schemaPath: '#/properties/cli-engine/properties/corePlugins/type',
                                  params: {
                                    type: 'array'
                                  },
                                  message: 'should be array'
                                }];
                                return false;
                              }
                              var valid2 = errors === errs_2;
                            }
                            if (valid2) {
                              var data2 = data1.hooks;
                              if (data2 === undefined) {
                                valid2 = true;
                              } else {
                                var errs_2 = errors;
                                if ((data2 && typeof data2 === "object" && !Array.isArray(data2))) {
                                  var errs__2 = errors;
                                  var valid3 = true;
                                  for (var key2 in data2) {
                                    var data3 = data2[key2];
                                    var errs_3 = errors;
                                    var errs__3 = errors;
                                    var valid3 = false;
                                    var errs_4 = errors;
                                    if (typeof data3 !== "string") {
                                      var err = {
                                        keyword: 'type',
                                        dataPath: (dataPath || '') + '[\'cli-engine\'].hooks[\'' + key2 + '\']',
                                        schemaPath: '#/properties/cli-engine/properties/hooks/additionalProperties/anyOf/0/type',
                                        params: {
                                          type: 'string'
                                        },
                                        message: 'should be string'
                                      };
                                      if (vErrors === null) vErrors = [err];
                                      else vErrors.push(err);
                                      errors++;
                                    }
                                    var valid4 = errors === errs_4;
                                    valid3 = valid3 || valid4;
                                    if (!valid3) {
                                      var errs_4 = errors;
                                      if (Array.isArray(data3)) {
                                        var errs__4 = errors;
                                        var valid4;
                                        for (var i4 = 0; i4 < data3.length; i4++) {
                                          var errs_5 = errors;
                                          if (typeof data3[i4] !== "string") {
                                            var err = {
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '[\'cli-engine\'].hooks[\'' + key2 + '\'][' + i4 + ']',
                                              schemaPath: '#/properties/cli-engine/properties/hooks/additionalProperties/anyOf/1/items/type',
                                              params: {
                                                type: 'string'
                                              },
                                              message: 'should be string'
                                            };
                                            if (vErrors === null) vErrors = [err];
                                            else vErrors.push(err);
                                            errors++;
                                          }
                                          var valid5 = errors === errs_5;
                                          if (!valid5) break;
                                        }
                                      } else {
                                        var err = {
                                          keyword: 'type',
                                          dataPath: (dataPath || '') + '[\'cli-engine\'].hooks[\'' + key2 + '\']',
                                          schemaPath: '#/properties/cli-engine/properties/hooks/additionalProperties/anyOf/1/type',
                                          params: {
                                            type: 'array'
                                          },
                                          message: 'should be array'
                                        };
                                        if (vErrors === null) vErrors = [err];
                                        else vErrors.push(err);
                                        errors++;
                                      }
                                      var valid4 = errors === errs_4;
                                      valid3 = valid3 || valid4;
                                    }
                                    if (!valid3) {
                                      var err = {
                                        keyword: 'anyOf',
                                        dataPath: (dataPath || '') + '[\'cli-engine\'].hooks[\'' + key2 + '\']',
                                        schemaPath: '#/properties/cli-engine/properties/hooks/additionalProperties/anyOf',
                                        params: {},
                                        message: 'should match some schema in anyOf'
                                      };
                                      if (vErrors === null) vErrors = [err];
                                      else vErrors.push(err);
                                      errors++;
                                      validate.errors = vErrors;
                                      return false;
                                    } else {
                                      errors = errs__3;
                                      if (vErrors !== null) {
                                        if (errs__3) vErrors.length = errs__3;
                                        else vErrors = null;
                                      }
                                    }
                                    var valid3 = errors === errs_3;
                                    if (!valid3) break;
                                  }
                                }
                                var valid2 = errors === errs_2;
                              }
                              if (valid2) {
                                var data2 = data1.s3;
                                if (data2 === undefined) {
                                  valid2 = true;
                                } else {
                                  var errs_2 = errors;
                                  if ((data2 && typeof data2 === "object" && !Array.isArray(data2))) {
                                    if (true) {
                                      var errs__2 = errors;
                                      var valid3 = true;
                                      for (var key2 in data2) {
                                        var isAdditional2 = !(false || key2 == 'host');
                                        if (isAdditional2) {
                                          valid3 = false;
                                          validate.errors = [{
                                            keyword: 'additionalProperties',
                                            dataPath: (dataPath || '') + '[\'cli-engine\'].s3',
                                            schemaPath: '#/properties/cli-engine/properties/s3/additionalProperties',
                                            params: {
                                              additionalProperty: '' + key2 + ''
                                            },
                                            message: 'should NOT have additional properties'
                                          }];
                                          return false;
                                          break;
                                        }
                                      }
                                      if (valid3) {
                                        if (data2.host === undefined) {
                                          valid3 = false;
                                          validate.errors = [{
                                            keyword: 'required',
                                            dataPath: (dataPath || '') + '[\'cli-engine\'].s3',
                                            schemaPath: '#/properties/cli-engine/properties/s3/required',
                                            params: {
                                              missingProperty: 'host'
                                            },
                                            message: 'should have required property \'host\''
                                          }];
                                          return false;
                                        } else {
                                          var errs_3 = errors;
                                          if (typeof data2.host !== "string") {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: (dataPath || '') + '[\'cli-engine\'].s3.host',
                                              schemaPath: '#/properties/cli-engine/properties/s3/properties/host/type',
                                              params: {
                                                type: 'string'
                                              },
                                              message: 'should be string'
                                            }];
                                            return false;
                                          }
                                          var valid3 = errors === errs_3;
                                        }
                                      }
                                    }
                                  } else {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: (dataPath || '') + '[\'cli-engine\'].s3',
                                      schemaPath: '#/properties/cli-engine/properties/s3/type',
                                      params: {
                                        type: 'object'
                                      },
                                      message: 'should be object'
                                    }];
                                    return false;
                                  }
                                  var valid2 = errors === errs_2;
                                }
                                if (valid2) {
                                  if (data1.topics === undefined) {
                                    valid2 = true;
                                  } else {
                                    var errs_2 = errors;
                                    if (!refVal2(data1.topics, (dataPath || '') + '[\'cli-engine\'].topics', data1, 'topics', rootData)) {
                                      if (vErrors === null) vErrors = refVal2.errors;
                                      else vErrors = vErrors.concat(refVal2.errors);
                                      errors = vErrors.length;
                                    }
                                    var valid2 = errors === errs_2;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            validate.errors = [{
              keyword: 'type',
              dataPath: (dataPath || '') + '[\'cli-engine\']',
              schemaPath: '#/properties/cli-engine/type',
              params: {
                type: 'object'
              },
              message: 'should be object'
            }];
            return false;
          }
          var valid1 = errors === errs_1;
        }
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal1.schema = {
    "properties": {
      "cli-engine": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "pattern": "cli"
          },
          "bin": {
            "type": "string"
          },
          "commands": {
            "type": "string"
          },
          "defaultCommand": {
            "type": "string"
          },
          "dirname": {
            "type": "string"
          },
          "npmRegistry": {
            "type": "string"
          },
          "userPluginsEnabled": {
            "type": "boolean"
          },
          "corePlugins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hooks": {
            "additionalProperties": {
              "anyOf": [{
                "type": "string"
              }, {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }]
            }
          },
          "s3": {
            "type": "object",
            "additionalProperties": false,
            "required": ["host"],
            "properties": {
              "host": {
                "type": "string"
              }
            }
          },
          "topics": {
            "$ref": "#/definitions/topics"
          }
        }
      }
    }
  };
  refVal1.errors = null;
  refVal[1] = refVal1;
  var refVal2 = (function() {
    var pattern0 = new RegExp('cli');
    var pattern1 = new RegExp('plugin');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var data1 = data[key0];
          var errs_1 = errors;
          if ((data1 && typeof data1 === "object" && !Array.isArray(data1))) {
            if (true) {
              var errs__1 = errors;
              var valid2 = true;
              for (var key1 in data1) {
                var isAdditional1 = !(false || key1 == 'description' || key1 == 'hidden' || key1 == 'subtopics');
                if (isAdditional1) {
                  valid2 = false;
                  validate.errors = [{
                    keyword: 'additionalProperties',
                    dataPath: (dataPath || '') + '[\'' + key0 + '\']',
                    schemaPath: '#/additionalProperties/additionalProperties',
                    params: {
                      additionalProperty: '' + key1 + ''
                    },
                    message: 'should NOT have additional properties'
                  }];
                  return false;
                  break;
                }
              }
              if (valid2) {
                if (data1.description === undefined) {
                  valid2 = false;
                  validate.errors = [{
                    keyword: 'required',
                    dataPath: (dataPath || '') + '[\'' + key0 + '\']',
                    schemaPath: '#/additionalProperties/required',
                    params: {
                      missingProperty: 'description'
                    },
                    message: 'should have required property \'description\''
                  }];
                  return false;
                } else {
                  var errs_2 = errors;
                  if (typeof data1.description !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '[\'' + key0 + '\'].description',
                      schemaPath: '#/additionalProperties/properties/description/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data1.hidden === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (typeof data1.hidden !== "boolean") {
                      validate.errors = [{
                        keyword: 'type',
                        dataPath: (dataPath || '') + '[\'' + key0 + '\'].hidden',
                        schemaPath: '#/additionalProperties/properties/hidden/type',
                        params: {
                          type: 'boolean'
                        },
                        message: 'should be boolean'
                      }];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                  }
                  if (valid2) {
                    if (data1.subtopics === undefined) {
                      valid2 = true;
                    } else {
                      var errs_2 = errors;
                      if (!refVal[2](data1.subtopics, (dataPath || '') + '[\'' + key0 + '\'].subtopics', data1, 'subtopics', rootData)) {
                        if (vErrors === null) vErrors = refVal[2].errors;
                        else vErrors = vErrors.concat(refVal[2].errors);
                        errors = vErrors.length;
                      }
                      var valid2 = errors === errs_2;
                    }
                  }
                }
              }
            }
          } else {
            validate.errors = [{
              keyword: 'type',
              dataPath: (dataPath || '') + '[\'' + key0 + '\']',
              schemaPath: '#/additionalProperties/type',
              params: {
                type: 'object'
              },
              message: 'should be object'
            }];
            return false;
          }
          var valid1 = errors === errs_1;
          if (!valid1) break;
        }
      } else {
        validate.errors = [{
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: {
            type: 'object'
          },
          message: 'should be object'
        }];
        return false;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal2.schema = {
    "type": "object",
    "additionalProperties": {
      "type": "object",
      "additionalProperties": false,
      "required": ["description"],
      "properties": {
        "description": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "subtopics": {
          "$ref": "#/definitions/topics"
        }
      }
    }
  };
  refVal2.errors = null;
  refVal[2] = refVal2;
  var refVal3 = (function() {
    var pattern0 = new RegExp('cli');
    var pattern1 = new RegExp('plugin');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) {
        var errs__0 = errors;
        var valid1 = true;
        var data1 = data['cli-engine'];
        if (data1 === undefined) {
          valid1 = true;
        } else {
          var errs_1 = errors;
          if ((data1 && typeof data1 === "object" && !Array.isArray(data1))) {
            var errs__1 = errors;
            var valid2 = true;
            for (var key1 in data1) {
              var isAdditional1 = !(false || key1 == 'type' || key1 == 'commands' || key1 == 'topics');
              if (isAdditional1) {
                valid2 = false;
                validate.errors = [{
                  keyword: 'additionalProperties',
                  dataPath: (dataPath || '') + '[\'cli-engine\']',
                  schemaPath: '#/properties/cli-engine/additionalProperties',
                  params: {
                    additionalProperty: '' + key1 + ''
                  },
                  message: 'should NOT have additional properties'
                }];
                return false;
                break;
              }
            }
            if (valid2) {
              var data2 = data1.type;
              if (data2 === undefined) {
                valid2 = true;
              } else {
                var errs_2 = errors;
                if (typeof data2 === "string") {
                  if (!pattern1.test(data2)) {
                    validate.errors = [{
                      keyword: 'pattern',
                      dataPath: (dataPath || '') + '[\'cli-engine\'].type',
                      schemaPath: '#/properties/cli-engine/properties/type/pattern',
                      params: {
                        pattern: 'plugin'
                      },
                      message: 'should match pattern "plugin"'
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: (dataPath || '') + '[\'cli-engine\'].type',
                    schemaPath: '#/properties/cli-engine/properties/type/type',
                    params: {
                      type: 'string'
                    },
                    message: 'should be string'
                  }];
                  return false;
                }
                var valid2 = errors === errs_2;
              }
              if (valid2) {
                if (data1.commands === undefined) {
                  valid2 = true;
                } else {
                  var errs_2 = errors;
                  if (typeof data1.commands !== "string") {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: (dataPath || '') + '[\'cli-engine\'].commands',
                      schemaPath: '#/properties/cli-engine/properties/commands/type',
                      params: {
                        type: 'string'
                      },
                      message: 'should be string'
                    }];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                }
                if (valid2) {
                  if (data1.topics === undefined) {
                    valid2 = true;
                  } else {
                    var errs_2 = errors;
                    if (!refVal[2](data1.topics, (dataPath || '') + '[\'cli-engine\'].topics', data1, 'topics', rootData)) {
                      if (vErrors === null) vErrors = refVal[2].errors;
                      else vErrors = vErrors.concat(refVal[2].errors);
                      errors = vErrors.length;
                    }
                    var valid2 = errors === errs_2;
                  }
                }
              }
            }
          } else {
            validate.errors = [{
              keyword: 'type',
              dataPath: (dataPath || '') + '[\'cli-engine\']',
              schemaPath: '#/properties/cli-engine/type',
              params: {
                type: 'object'
              },
              message: 'should be object'
            }];
            return false;
          }
          var valid1 = errors === errs_1;
        }
      } else {
        validate.errors = [{
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: {
            type: 'object'
          },
          message: 'should be object'
        }];
        return false;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal3.schema = {
    "type": "object",
    "properties": {
      "cli-engine": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "pattern": "plugin"
          },
          "commands": {
            "type": "string"
          },
          "topics": {
            "$ref": "#/definitions/topics"
          }
        }
      }
    }
  };
  refVal3.errors = null;
  refVal[3] = refVal3;
  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
    'use strict'; /*# sourceURL=heroku-cli */
    var vErrors = null;
    var errors = 0;
    if (rootData === undefined) rootData = data;
    if ((data && typeof data === "object" && !Array.isArray(data))) {
      var errs__0 = errors;
      var valid1 = true;
      if (data.cliPjson === undefined) {
        valid1 = true;
      } else {
        var errs_1 = errors;
        if (!refVal1(data.cliPjson, (dataPath || '') + '.cliPjson', data, 'cliPjson', rootData)) {
          if (vErrors === null) vErrors = refVal1.errors;
          else vErrors = vErrors.concat(refVal1.errors);
          errors = vErrors.length;
        }
        var valid1 = errors === errs_1;
      }
      if (valid1) {
        if (data.pluginPjson === undefined) {
          valid1 = true;
        } else {
          var errs_1 = errors;
          if (!refVal3(data.pluginPjson, (dataPath || '') + '.pluginPjson', data, 'pluginPjson', rootData)) {
            if (vErrors === null) vErrors = refVal3.errors;
            else vErrors = vErrors.concat(refVal3.errors);
            errors = vErrors.length;
          }
          var valid1 = errors === errs_1;
        }
      }
    } else {
      validate.errors = [{
        keyword: 'type',
        dataPath: (dataPath || '') + "",
        schemaPath: '#/type',
        params: {
          type: 'object'
        },
        message: 'should be object'
      }];
      return false;
    }
    validate.errors = vErrors;
    return errors === 0;
  };
})();
validate.schema = {
  "$id": "heroku-cli",
  "type": "object",
  "properties": {
    "cliPjson": {
      "$ref": "#/definitions/cli_pjson"
    },
    "pluginPjson": {
      "$ref": "#/definitions/plugin_pjson"
    }
  },
  "definitions": {
    "plugin_pjson": {
      "type": "object",
      "properties": {
        "cli-engine": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "pattern": "plugin"
            },
            "commands": {
              "type": "string"
            },
            "topics": {
              "$ref": "#/definitions/topics"
            }
          }
        }
      }
    },
    "cli_pjson": {
      "properties": {
        "cli-engine": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "type": "string",
              "pattern": "cli"
            },
            "bin": {
              "type": "string"
            },
            "commands": {
              "type": "string"
            },
            "defaultCommand": {
              "type": "string"
            },
            "dirname": {
              "type": "string"
            },
            "npmRegistry": {
              "type": "string"
            },
            "userPluginsEnabled": {
              "type": "boolean"
            },
            "corePlugins": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "hooks": {
              "additionalProperties": {
                "anyOf": [{
                  "type": "string"
                }, {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }]
              }
            },
            "s3": {
              "type": "object",
              "additionalProperties": false,
              "required": ["host"],
              "properties": {
                "host": {
                  "type": "string"
                }
              }
            },
            "topics": {
              "$ref": "#/definitions/topics"
            }
          }
        }
      }
    },
    "topics": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": false,
        "required": ["description"],
        "properties": {
          "description": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "subtopics": {
            "$ref": "#/definitions/topics"
          }
        }
      }
    }
  }
};
validate.errors = null;
module.exports = validate;