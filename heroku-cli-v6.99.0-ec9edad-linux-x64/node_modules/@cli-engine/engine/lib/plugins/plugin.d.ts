import { ICommand } from '@cli-engine/config';
import RWLockfile from 'rwlockfile';
import { ICommandInfo, ICommandManager, ILoadResult } from '../command';
import Config from '../config';
import { ITopic, ITopics } from '../topic';
export declare type PluginType = 'builtin' | 'main' | 'core' | 'user' | 'link';
export interface IPluginPJSON {
    name: string;
    version: string;
    main?: string;
    scripts?: {
        [k: string]: string;
    };
    oclif: {
        commands?: string;
        topics?: ITopics;
    };
    'cli-engine': {
        commands?: string;
        topics?: ITopics;
    };
}
export interface IPluginTopic {
    name: string;
    description?: string;
    hidden?: boolean;
}
export interface IPluginModule {
    commands: ICommand[];
    topic?: IPluginTopic;
    topics: IPluginTopic[];
}
export interface IPluginOptions {
    config: Config;
    root: string;
    pjson: IPluginPJSON;
    type: PluginType;
}
export declare abstract class Plugin implements ICommandManager {
    type: PluginType;
    name: string;
    version: string;
    tag?: string;
    pjson: IPluginPJSON;
    root: string;
    protected config: Config;
    protected debug: any;
    protected lock: RWLockfile;
    protected result: ILoadResult;
    protected skipCache?: boolean;
    private _module;
    private cache;
    constructor(opts: IPluginOptions);
    load(): Promise<ILoadResult>;
    reset(reload?: boolean): Promise<void>;
    findCommand(id: string, must: true): Promise<ICommand>;
    findCommand(id: string, must?: boolean): Promise<ICommand | undefined>;
    protected commands(): Promise<ICommandInfo[]>;
    protected topics(): Promise<ITopic[]>;
    protected readonly commandsDir: string | undefined;
    protected commandIDsFromDir(): Promise<string[]>;
    private commandPath(id);
    private commandsFromModule();
    private commandsFromDir();
    private commandInfoFromICommand(icommand, id?);
    private buildHelp(c);
    private buildHelpLine(c);
    private findCommandInDir(id);
    private findCommandInModule(id);
    private addPluginToCommand(cmd);
    private fetchModule();
    private cacheFetch<T>(key, fn);
    private convertConfig(config);
}
