"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const deps_1 = require("../deps");
const plugin_1 = require("./plugin");
class MainPlugin extends plugin_1.Plugin {
    constructor(config) {
        const root = config.root;
        const pjson = require(`${root}/package.json`);
        super({ config, type: 'main', root, pjson });
    }
    load() {
        const _super = name => super[name];
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.result)
                return this.result;
            this.tsconfig = yield this.fetchTSConfig();
            this._commandsDir = this.config.commandsDir;
            if (this.tsconfig) {
                this.debug('tsconfig.json found, skipping cache for main commands');
                this.skipCache = true;
                let { rootDir, outDir } = this.tsconfig.compilerOptions;
                if (rootDir && outDir) {
                    try {
                        this.debug('using ts files for main commands');
                        require('ts-node/register');
                        const lib = path.join(this.config.root, outDir);
                        const src = path.join(this.config.root, rootDir);
                        const relative = path.relative(lib, this.config.commandsDir);
                        this._commandsDir = path.join(src, relative);
                    }
                    catch (err) {
                        this.debug(err);
                    }
                }
            }
            return _super("load").call(this);
        });
    }
    get commandsDir() {
        return this._commandsDir;
    }
    fetchTSConfig() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const tsconfig = yield deps_1.default.file.readJSON(path.join(this.root, 'tsconfig.json'));
                return tsconfig.compilerOptions && tsconfig;
            }
            catch (err) {
                if (err.code !== 'ENOENT')
                    throw err;
            }
        });
    }
}
exports.MainPlugin = MainPlugin;
