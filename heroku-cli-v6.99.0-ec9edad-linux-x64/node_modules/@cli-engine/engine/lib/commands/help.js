"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@cli-engine/command");
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const list_1 = require("cli-ux/lib/list");
const ts_lodash_1 = require("ts-lodash");
const command_2 = require("../command");
const deps_1 = require("../deps");
const base_1 = require("./base");
function topicSort(a, b) {
    if (a[0] < b[0])
        return -1;
    if (a[0] > b[0])
        return 1;
    return 0;
}
class Help extends base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.cm = new command_2.CommandManager(this.config);
            let subject = this.args.subject;
            if (!subject) {
                yield this.topics();
                if (this.flags.all) {
                    let rootCmds = yield this.cm.rootCommands();
                    if (rootCmds) {
                        let rootTopics = yield this.cm.rootTopics();
                        rootCmds = rootCmds.filter(r => !Object.keys(rootTopics).includes(r.id));
                        yield this.listCommandsHelp(rootCmds);
                    }
                }
                return;
            }
            const topic = yield this.cm.findTopic(subject);
            const command = yield this.cm.findCommand(subject);
            if (!topic && !command) {
                return this.notFound(subject);
            }
            if (command)
                cli_ux_1.default.log(command.help);
            if (topic) {
                yield this.topics(topic);
                yield this.listCommandsHelp(deps_1.default.util.objValues(topic.commands), topic);
            }
        });
    }
    notFound(subject) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield deps_1.default.NotFound.run([subject], this.config);
        });
    }
    topics(parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let topics = deps_1.default.util
                .objValues(parent ? parent.subtopics : yield this.cm.rootTopics())
                .filter(t => this.flags.all || !t.hidden)
                .map(t => [` ${t.name}`, t.description ? color_1.color.dim(t.description) : null]);
            topics.sort(topicSort);
            if (!topics.length)
                return topics;
            // header
            cli_ux_1.default.log(`${color_1.color.bold('Usage:')} ${this.config.bin} ${parent ? `${parent.name}:` : ''}COMMAND

Help topics, type ${color_1.color.cmd(this.config.bin + ' help TOPIC')} for more details:\n`);
            // display topics
            cli_ux_1.default.log(list_1.renderList(topics));
            cli_ux_1.default.log();
        });
    }
    listCommandsHelp(commands, topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            commands = ts_lodash_1.default.sortBy(commands, 'id');
            commands = commands.filter(c => this.flags.all || !c.hidden);
            if (commands.length === 0)
                return;
            let helpCmd = color_1.color.cmd(`${this.config.bin} help ${topic ? `${topic.name}:` : ''}COMMAND`);
            if (topic) {
                cli_ux_1.default.log(`${this.config.bin} ${color_1.color.bold(topic.name)} commands: (get help with ${helpCmd})\n`);
            }
            else {
                cli_ux_1.default.log('Root commands:\n');
            }
            let helpLines = commands.map(c => c.helpLine).map(([a, b]) => [` ${a}`, b]);
            cli_ux_1.default.log(list_1.renderList(helpLines));
            cli_ux_1.default.log();
        });
    }
}
Help.description = 'display help';
Help.variableArgs = true;
Help.aliases = ['-h'];
Help.args = [{ name: 'subject', required: false }];
Help.flags = {
    help: command_1.flags.boolean({ hidden: true }),
    all: command_1.flags.boolean({ description: 'show all commands' }),
};
exports.default = Help;
