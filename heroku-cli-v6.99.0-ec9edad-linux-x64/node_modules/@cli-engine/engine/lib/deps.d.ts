/// <reference types="klaw" />
/// <reference types="globby" />
import Heroku = require('@heroku-cli/command');
import assync = require('assync');
import * as FS from 'fs-extra';
import globby = require('globby');
import { HTTP } from 'http-call';
import * as klaw from 'klaw';
import * as moment from 'moment';
import semver = require('semver');
import command = require('./command');
import help = require('./commands/help');
import file = require('./file');
import Hooks = require('./hooks');
import notFound = require('./not_found');
import Plugins = require('./plugins');
import pluginLegacy = require('./plugins/legacy');
import pluginManifest = require('./plugins/manifest');
import yarn = require('./plugins/yarn');
import updater = require('./updater');
import util = require('./util');
import validate = require('./validate');
declare const _default: {
    readonly HTTP: typeof HTTP;
    readonly moment: typeof moment;
    readonly klaw: (root: string, options?: klaw.Options | undefined) => klaw.Walker;
    readonly Heroku: typeof Heroku;
    readonly semver: typeof semver;
    readonly assync: <T>(items: assync.MaybePromise<T[]>) => assync.Assync<T>;
    readonly filesize: any;
    readonly globby: typeof globby;
    readonly Help: typeof help.Help;
    readonly Hooks: typeof Hooks.Hooks;
    readonly NotFound: typeof notFound.NotFound;
    readonly Updater: typeof updater.Updater;
    readonly util: typeof util;
    readonly file: typeof file;
    readonly fs: typeof FS;
    readonly validate: typeof validate;
    readonly Plugins: typeof Plugins.Plugins;
    readonly Yarn: typeof yarn.Yarn;
    readonly PluginManifest: typeof pluginManifest.PluginManifest;
    readonly PluginLegacy: typeof pluginLegacy.PluginLegacy;
    readonly CommandManager: typeof command.CommandManager;
};
export default _default;
