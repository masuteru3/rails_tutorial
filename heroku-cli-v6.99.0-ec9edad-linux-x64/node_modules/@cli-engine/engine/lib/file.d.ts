/// <reference types="node" />
/// <reference types="klaw" />
import { Stats } from 'fs';
import * as fs from 'fs-extra';
import * as klaw from 'klaw';
export declare function exists(f: string): Promise<boolean>;
export declare function existsSync(f: string): boolean;
export declare function fetchJSONFile(f: string): Promise<any>;
export declare function rename(from: string, to: string): Promise<void>;
export declare function mkdirp(dir: string): Promise<void>;
export declare function outputFile(file: string, data: any, options?: fs.WriteFileOptions | string): Promise<void>;
export declare function outputFileSync(p: string, body: string): void;
export declare function outputJSON(file: string, data: any, options?: fs.WriteOptions): Promise<void>;
export declare function readJSON(file: string): Promise<any>;
export declare function readFile(file: string): Promise<string>;
export declare function remove(file: string): Promise<void>;
export declare function stat(file: string): Promise<Stats>;
export declare function open(path: string | Buffer, flags: string | number, mode?: number): Promise<number>;
export declare function write(fd: number, data: any): Promise<Stats>;
export declare function walk(root: string, opts?: klaw.Options): Promise<klaw.Item[]>;
export declare function ls(dir: string): Promise<{
    path: string;
    stat: Stats;
}[]>;
export declare function cleanup(dir: string): Promise<void>;
export declare function symlink(src: string, dst: string): Promise<void>;
export declare function utimesSync(p: string, atime: Date, mtime: Date): void;
export declare function touch(p: string): Promise<void>;
export declare function mkdirpSync(p: string): void;
export declare function emptyDir(p: string): Promise<void>;
