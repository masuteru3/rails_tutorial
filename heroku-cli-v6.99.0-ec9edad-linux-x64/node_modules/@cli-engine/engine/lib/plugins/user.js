"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_ux_1 = require("cli-ux");
const path = require("path");
const rwlockfile_1 = require("rwlockfile");
const ts_lodash_1 = require("ts-lodash");
const deps_1 = require("../deps");
const plugin_1 = require("./plugin");
const yarn_1 = require("./yarn");
class UserPlugins {
    constructor(config) {
        this.config = config;
        this.debug = require('debug')('cli:plugins:user');
        this.manifest = new deps_1.default.PluginManifest({
            name: 'user',
            file: path.join(this.config.dataDir, 'plugins', 'user.json'),
        });
        this.lock = new rwlockfile_1.default(this.manifest.file, { ifLocked: () => cli_ux_1.default.action.start('Updating user plugins') });
        this.yarn = new yarn_1.default({ config: this.config, cwd: this.userPluginsDir });
    }
    submanagers() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.init();
            return this.plugins;
        });
    }
    update() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.init();
            if (!this.plugins)
                return;
            cli_ux_1.default.action.start(`${this.config.name}: Updating plugins`);
            const packages = deps_1.default.util.objEntries(yield this.manifestPlugins()).map(([k]) => `${k}@latest`);
            yield this.yarn.exec(['add', ...packages]);
            yield this.refresh(true);
        });
    }
    install(name, tag) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            cli_ux_1.default.action.start(`Installing ${name}@${tag}`);
            yield this.init();
            yield this.addPlugin(name, tag);
            cli_ux_1.default.action.stop();
        });
    }
    uninstall(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.removePlugin(name);
        });
    }
    refresh(force = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.plugins.length)
                return;
            const nodeVersionChanged = (yield this.yarnNodeVersion()) !== process.version;
            if (!force && !nodeVersionChanged)
                return;
            if (nodeVersionChanged)
                cli_ux_1.default.action.start(`Updating plugins, node version changed to ${process.versions.node}`);
            yield this.lock.add('write', { reason: 'refresh' });
            try {
                yield this.yarn.exec();
                for (let p of this.plugins.map(p => p.reset()))
                    yield p;
            }
            finally {
                yield this.lock.remove('write');
            }
        });
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.migrate();
            if (!this.plugins && (yield this.hasPlugins()))
                yield this.fetchPlugins();
        });
    }
    hasPlugins() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (yield deps_1.default.file.exists(this.manifest.file))
                return true;
            this.debug('no user plugins');
            return false;
        });
    }
    fetchPlugins() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.debug('fetchPlugins');
            this.plugins = ts_lodash_1.default.compact(yield Promise.all(deps_1.default.util.objEntries(yield this.manifestPlugins()).map(([k, v]) => {
                return this.loadPlugin(k, v.tag).catch(err => {
                    if (err.code === 'ENOCOMMANDS')
                        this.debug(err);
                    else
                        cli_ux_1.default.warn(err);
                    return null;
                });
            })));
            if (this.plugins.length)
                this.debug('plugins:', this.plugins.map(p => p.name).join(', '));
            // skip plugin rebuilding for now
            // await this.refresh()
        });
    }
    loadPlugin(name, tag) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pjsonPath = path.join(this.userPluginPath(name), 'package.json');
            if (!(yield deps_1.default.file.exists(pjsonPath))) {
                cli_ux_1.default.action.start(`Refreshing user plugins`);
                yield this.addPlugin(name, tag);
            }
            const pjson = yield deps_1.default.file.readJSON(pjsonPath);
            let p = new UserPlugin({
                type: 'user',
                pjson,
                tag,
                root: this.userPluginPath(name),
                config: this.config,
            });
            return p;
        });
    }
    userPluginPath(name) {
        return path.join(this.userPluginsDir, 'node_modules', name);
    }
    get userPluginsDir() {
        return path.join(this.config.dataDir, 'plugins');
    }
    get pjsonPath() {
        return path.join(this.userPluginsDir, 'package.json');
    }
    createPJSON() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!(yield deps_1.default.file.exists(this.pjsonPath))) {
                yield deps_1.default.file.outputJSON(this.pjsonPath, { private: true, 'cli-engine': { schema: 1 } }, { spaces: 2 });
            }
        });
    }
    migrate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const userPath = path.join(this.config.dataDir, 'plugins', 'package.json');
            if (!(yield deps_1.default.file.exists(userPath)))
                return;
            yield this.lock.add('read', { reason: 'migrate' });
            try {
                let user = yield deps_1.default.file.readJSON(userPath);
                if (!user.dependencies || user['cli-engine'])
                    return;
                yield this.lock.add('write', { reason: 'migrate' });
                try {
                    cli_ux_1.default.action.start('Refreshing plugins');
                    yield deps_1.default.file.remove(path.join(this.config.dataDir, 'plugins/node_modules'));
                    yield this.createPJSON();
                    yield this.yarn.exec();
                    this.debug('migrating user plugins');
                    for (let [name, tag] of deps_1.default.util.objEntries(user.dependencies)) {
                        yield this.addPlugin(name, tag);
                    }
                    user['cli-engine'] = { schema: 1 };
                    yield deps_1.default.file.outputJSON(userPath, user);
                }
                finally {
                    yield this.lock.remove('write');
                }
            }
            finally {
                yield this.lock.remove('read');
            }
        });
    }
    addPlugin(name, tag) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.createPJSON();
                yield this.yarn.exec(['add', `${name}@${tag}`]);
                let plugin = yield this.loadPlugin(name, tag);
                yield plugin.reset(true);
                let plugins = yield this.manifestPlugins();
                plugins[name] = { tag };
                yield this.manifest.set('plugins', plugins);
                yield this.manifest.save();
            }
            catch (err) {
                yield this.removePlugin(name).catch(err => this.debug(err));
                throw err;
            }
        });
    }
    removePlugin(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let plugins = yield this.manifestPlugins();
            if (!plugins[name])
                return false;
            delete plugins[name];
            yield this.manifest.set('plugins', plugins);
            yield this.manifest.save();
            yield this.yarn.exec(['remove', name]);
            return true;
        });
    }
    manifestPlugins() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (yield this.manifest.get('plugins')) || {};
        });
    }
    yarnNodeVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let f = yield deps_1.default.file.readJSON(path.join(this.userPluginsDir, 'node_modules', '.yarn-integrity'));
                return f.nodeVersion;
            }
            catch (err) {
                if (err.code !== 'ENOENT')
                    throw err;
            }
        });
    }
}
tslib_1.__decorate([
    rwlockfile_1.rwlockfile('lock', 'write')
], UserPlugins.prototype, "update", null);
tslib_1.__decorate([
    rwlockfile_1.rwlockfile('lock', 'write')
], UserPlugins.prototype, "install", null);
tslib_1.__decorate([
    rwlockfile_1.rwlockfile('lock', 'write')
], UserPlugins.prototype, "uninstall", null);
exports.UserPlugins = UserPlugins;
class UserPlugin extends plugin_1.Plugin {
    constructor(opts) {
        super(opts);
        this.type = 'user';
        this.tag = opts.tag || 'latest';
    }
}
exports.UserPlugin = UserPlugin;
