"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Topic {
    static parentTopicIDof(id) {
        return id
            .split(':')
            .slice(0, -1)
            .join(':');
    }
    static findTopic(name, topics) {
        let id = name.split(':');
        name = id.pop();
        if (id.length > 0) {
            let parent = Topic.findTopic(id.join(':'), topics);
            if (!parent)
                return;
            topics = parent.subtopics;
        }
        return topics[name];
    }
    static findOrCreateTopic(opts, topics) {
        let id = opts.name.split(':');
        opts.name = id.pop();
        if (id.length > 0) {
            let parent = Topic.findOrCreateTopic({ name: id.join(':') }, topics);
            topics = parent.subtopics;
        }
        if (!topics[opts.name]) {
            topics[opts.name] = new Topic(opts);
        }
        else {
            topics[opts.name] = Topic.mergeTopics(topics[opts.name], opts);
        }
        return topics[opts.name];
    }
    static mergeSubtopics(...subtopics) {
        const topics = {};
        for (let p of subtopics) {
            if (!p)
                continue;
            for (let k of Object.keys(p)) {
                const t = p[k];
                if (!t.name)
                    continue;
                Topic.findOrCreateTopic(t, topics);
            }
        }
        return topics;
    }
    static mergeTopics(a, b) {
        return new Topic(Object.assign({}, b, a, { commands: Object.assign({}, (b || {}).commands, (a || {}).commands), subtopics: Topic.mergeSubtopics((a || {}).subtopics, (b || {}).subtopics) }));
    }
    constructor(opts) {
        if (opts.name.includes(':'))
            throw new Error(`${this.name} should not have ":" in it`);
        this.name = opts.name;
        this.description = opts.description;
        this.hidden = !!opts.hidden;
        this.subtopics = opts.subtopics || {};
        this.commands = opts.commands || {};
    }
}
exports.Topic = Topic;
