import { Config } from '@cli-engine/config';
import { flags } from 'cli-flags';
export interface ICompletionContext {
    args?: {
        [name: string]: string;
    };
    flags?: {
        [name: string]: string;
    };
    argv?: string[];
    config: Config;
}
export interface ICompletion {
    skipCache?: boolean;
    cacheDuration?: number;
    cacheKey?: (ctx: ICompletionContext) => Promise<string>;
    options: (ctx: ICompletionContext) => Promise<string[]>;
}
export interface IOptionFlag<T = string> extends flags.IOptionFlag<T> {
    completion?: ICompletion;
}
export declare type IFlag<T = string> = flags.IBooleanFlag | IOptionFlag<T>;
export interface Input {
    [k: string]: IFlag<any>;
}
export declare type Definition<T = string> = (options?: Partial<IOptionFlag<T>>) => IOptionFlag<T>;
export declare function option<T = string>(defaults?: Partial<IOptionFlag<T>>): Definition<T>;
export declare function string(defaults?: Partial<IOptionFlag>): IOptionFlag;
export { boolean } from 'cli-flags/lib/flags';
