import { Config, ICommand } from '@cli-engine/config';
import { args as Args } from 'cli-flags';
import { IPluginModule, IPluginTopic } from './plugin';
export interface ILegacyTopic {
    id?: string;
    name?: string;
    topic?: string;
}
export interface ILegacyContext {
    version: string;
    supportsColor: boolean;
    auth: {
        password?: string;
    };
    debug: boolean;
    debugHeaders: boolean;
    flags: {
        [k: string]: string;
    };
    args: string[] | {
        [k: string]: string;
    };
    app?: string;
    org?: string;
    team?: string;
    config: Config;
    apiUrl: string;
    herokuDir: string;
    apiToken?: string;
    apiHost: string;
    gitHost: string;
    httpGitHost: string;
    cwd: string;
}
export interface IFlowCommand {
    id: string;
}
export declare type LegacyCommand = IV5Command | IFlowCommand;
export declare type AnyTopic = IPluginTopic | ILegacyTopic;
export declare type AnyCommand = ICommand | LegacyCommand;
export interface IV5Command {
    topic: string;
    command?: string;
    aliases?: string[];
    variableArgs?: boolean;
    args: Args.IArg[];
    flags: ILegacyFlag[];
    description?: string;
    help?: string;
    usage?: string;
    needsApp?: boolean;
    wantsApp?: boolean;
    needsAuth?: boolean;
    needsOrg?: boolean;
    wantsOrg?: boolean;
    hidden?: boolean;
    default?: boolean;
    run: (ctx: ILegacyContext) => Promise<any>;
}
export interface ILegacyModule {
    topics: AnyTopic[];
    commands: AnyCommand[];
}
export interface ILegacyFlag {
    name: string;
    description?: string;
    char?: string;
    hasValue?: boolean;
    hidden?: boolean;
    required?: boolean;
    optional?: boolean;
    parse?: any;
    default?: any;
}
export declare class PluginLegacy {
    constructor(_: Config);
    convert(m: IPluginModule | ILegacyModule): IPluginModule;
    private convertCommands(c);
    private convertCommand(c);
    private convertFromICommand(c);
    private convertFromFlow(c);
    private convertFromV5(c);
    private isICommand(command);
    private isV5Command(command);
    private isFlowCommand(command);
}
