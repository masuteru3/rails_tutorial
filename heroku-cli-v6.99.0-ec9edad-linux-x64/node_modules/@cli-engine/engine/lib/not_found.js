"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const base_1 = require("./commands/base");
const deps_1 = require("./deps");
class NotFound extends base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.cm = new deps_1.default.CommandManager(this.config);
            let closest;
            let binHelp = `${this.config.bin} help`;
            let id = this.argv[0];
            let idSplit = id.split(':');
            if (yield this.cm.findTopic(idSplit[0])) {
                // if valid topic, update binHelp with topic
                binHelp = `${binHelp} ${idSplit[0]}`;
                // if topic:COMMAND present, try closest for id
                if (idSplit[1])
                    closest = this.closest(id);
            }
            else {
                closest = this.closest(id);
            }
            let perhaps = closest ? `Perhaps you meant ${color_1.color.yellow(yield closest)}\n` : '';
            cli_ux_1.default.error(`${color_1.color.yellow(id)} is not a ${this.config.bin} command.
${perhaps}Run ${color_1.color.cmd(binHelp)} for a list of available commands.`, { exitCode: 127 });
        });
    }
    allCommands() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let commands = yield this.cm.commands();
            return commands.map(c => c.id);
            // TODO add aliases
            // return this.commandManager.listCommandIDs().reduce((commands, c) => {
            //   return commands.concat([c.id]).concat(c.aliases || [])
            // }, [])
        });
    }
    closest(cmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const DCE = require('string-similarity');
            return DCE.findBestMatch(cmd, yield this.allCommands()).bestMatch.target;
        });
    }
}
NotFound.variableArgs = true;
exports.default = NotFound;
