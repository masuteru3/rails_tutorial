import Config from '../config';
import { Builtin } from './builtin';
import { CorePlugins } from './core';
import { LinkPlugins } from './link';
import { MainPlugin } from './main';
import { Plugin } from './plugin';
import { UserPlugins } from './user';
export declare type InstallOptions = ILinkInstallOptions | IUserInstallOptions;
export interface IUserInstallOptions {
    type: 'user';
    name: string;
    tag: string;
    force?: boolean;
}
export interface ILinkInstallOptions {
    type: 'link';
    root: string;
    force?: boolean;
}
export declare class Plugins {
    private config;
    builtin: Builtin;
    main: MainPlugin;
    core: CorePlugins;
    user: UserPlugins;
    link: LinkPlugins;
    protected debug: any;
    private plugins;
    constructor(config: Config);
    submanagers(): Promise<(Builtin | MainPlugin | CorePlugins | UserPlugins | LinkPlugins)[]>;
    install(options: InstallOptions): Promise<void>;
    update(): Promise<void>;
    uninstall(name: string): Promise<void>;
    list(): Promise<Plugin[]>;
    private init();
    private getLinkedPackageName(root);
    private pluginType(name);
}
