import { Arg } from './args';
import { IFlag } from './flags';
import { ParserInput, ParserOutput } from './parse';
export interface ICLIParseErrorOptions {
    parse: {
        input: ParserInput;
        output: ParserOutput;
    };
}
export declare class CLIParseError extends Error {
    parse: ICLIParseErrorOptions['parse'];
    constructor(options: ICLIParseErrorOptions & {
        message: string;
    });
}
export declare class RequiredArgsError extends CLIParseError {
    args: Arg<any>[];
    constructor({args, parse}: ICLIParseErrorOptions & {
        args: Arg<any>[];
    });
}
export declare class RequiredFlagError extends CLIParseError {
    flags: IFlag<any>[];
    constructor({flags, parse}: ICLIParseErrorOptions & {
        flags: IFlag<any>[];
    });
}
export declare class UnexpectedArgsError extends CLIParseError {
    args: string[];
    constructor({parse, args}: ICLIParseErrorOptions & {
        args: string[];
    });
}
